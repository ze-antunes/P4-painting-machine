!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var n=t();for(var i in n)("object"==typeof exports?exports:e)[i]=n[i]}}(global,(function(){return(()=>{"use strict";var e={n:t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},d:(t,n)=>{for(var i in n)e.o(n,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:n[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{getDefaultPrinter:()=>b,getPrinters:()=>x,print:()=>w});const n=require("path");var i=e.n(n);const r=require("fs");var o=e.n(r);const a=require("child_process"),s=require("util"),c=e.n(s)().promisify(a.execFile),u="electron"in process.versions&&process.mainModule&&process.mainModule.filename.includes("app.asar"),l=require("os");var p=e.n(l);function d(){if("win32"!==p().platform())throw"Operating System not supported"}const f=["odd","even"],h=["portrait","landscape"],m=["noscale","shrink","fit"],v=["duplex","duplexshort","duplexlong","simplex"],y=["A2","A3","A4","A5","A6","letter","legal","tabloid","statement"];function w(e,t={}){return n=this,r=void 0,s=function*(){if(d(),!e)throw"No PDF specified";if(!o().existsSync(e))throw"No such file";let n=t.sumatraPdfPath||i().join(__dirname,"SumatraPDF.exe");var r;t.sumatraPdfPath||(r=n,n=u?r.replace("app.asar","app.asar.unpacked"):r);const a=[],{printer:s,silent:l,printDialog:p}=t;p?a.push("-print-dialog"):(s?a.push("-print-to",s):a.push("-print-to-default"),!1!==l&&a.push("-silent"));const w=function(e){const{pages:t,subset:n,orientation:i,scale:r,monochrome:o,side:a,bin:s,paperSize:c,copies:u}=e,l=[];if(t&&l.push(t),n){if(!f.includes(n))throw`Invalid subset provided. Valid names: ${f.join(", ")}`;l.push(n)}if(i){if(!h.includes(i))throw`Invalid orientation provided. Valid names: ${h.join(", ")}`;l.push(i)}if(r){if(!m.includes(r))throw`Invalid scale provided. Valid names: ${m.join(", ")}`;l.push(r)}if(o?l.push("monochrome"):!1===o&&l.push("color"),a){if(!v.includes(a))throw`Invalid side provided. Valid names: ${v.join(", ")}`;l.push(a)}if(s&&l.push(`bin=${s}`),c){if(!y.includes(c))throw`Invalid paper size provided. Valid names: ${y.join(", ")}`;l.push(`paper=${c}`)}return u&&l.push(`${u}x`),l}(t);w.length&&a.push("-print-settings",w.join(",")),a.push(e);try{yield c(n,a)}catch(e){throw e}},new((a=void 0)||(a=Promise))((function(e,t){function i(e){try{c(s.next(e))}catch(e){t(e)}}function o(e){try{c(s.throw(e))}catch(e){t(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof a?n:new a((function(e){e(n)}))).then(i,o)}c((s=s.apply(n,r||[])).next())}));var n,r,a,s}function P(e){const t={deviceId:"",name:""};return{isValid:e.split(/\r?\n/).some((e=>{const[n,i]=e.split(":").map((e=>e.trim())),r=n.toLowerCase();return"deviceid"===r&&(t.deviceId=i),"name"===r&&(t.name=i),!(!t.deviceId||!t.name)})),printerData:t}}const x=function(){return e=this,t=void 0,i=function*(){try{d();const{stdout:e}=yield c("Powershell.exe",["-Command","Get-CimInstance Win32_Printer -Property DeviceID,Name"]);return function(e){const t=[];return e.split(/(\r?\n){2,}/).map((e=>e.trim())).filter((e=>!!e)).forEach((e=>{const{isValid:n,printerData:i}=P(e);n&&t.push(i)})),t}(e)}catch(e){throw e}},new((n=void 0)||(n=Promise))((function(r,o){function a(e){try{c(i.next(e))}catch(e){o(e)}}function s(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((i=i.apply(e,t||[])).next())}));var e,t,n,i};const b=function(){return e=this,t=void 0,i=function*(){try{d();const{stdout:e}=yield c("Powershell.exe",["-Command","Get-CimInstance Win32_Printer -Property DeviceID,Name -Filter Default=true"]),t=e.trim();if(!e)return null;const{isValid:n,printerData:i}=P(t);return n?i:null}catch(e){throw e}},new((n=void 0)||(n=Promise))((function(r,o){function a(e){try{c(i.next(e))}catch(e){o(e)}}function s(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((i=i.apply(e,t||[])).next())}));var e,t,n,i};return t})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,